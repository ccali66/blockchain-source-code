var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "path", "./processor"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var path_1 = __importDefault(require("path"));
    var Processor = __importStar(require("./processor"));
    var destpath = path_1.default.join(__dirname, '../src/encrypted/test_encrypted.pdf');
    var sourcepath = path_1.default.join(__dirname, '../src/decrypted/test_decrypted.pdf');
    var password = 'testpassword';
    var username = "testusername";
    var processor = new Processor.EncryptDecryptPDF.PDFProcessor(password, username);
    // encrypt pdf
    // processor
    //   .encrypt(sourcepath, destpath)
    //   .then((data: any) => console.log(data))
    //   .catch((err: any) => console.log(err));
    // //decrypt pdf
    processor
        .decrypt(destpath, sourcepath)
        .then(function (data) { return console.log(data); })
        .catch(function (err) { return console.log(err); });
});
